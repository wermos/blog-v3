---
import { comment } from '@/consts'

interface Props {
  class?: string
}

const { class: className } = Astro.props
---

{comment.enable && comment.type === 'giscus' && (
  <div class={className}>
    <script
      is:inline
      src="https://giscus.app/client.js"
      data-repo={comment.giscusConfig['data-repo']}
      data-repo-id={comment.giscusConfig['data-repo-id']}
      data-category={comment.giscusConfig['data-category']}
      data-category-id={comment.giscusConfig['data-category-id']}
      data-mapping={comment.giscusConfig['data-mapping']}
      data-strict={comment.giscusConfig['data-strict']}
      data-reactions-enabled={comment.giscusConfig['data-reactions-enabled']}
      data-emit-metadata={comment.giscusConfig['data-emit-metadata']}
      data-input-position={comment.giscusConfig['data-input-position']}
      data-theme="catppuccin_latte"
      data-lang={comment.giscusConfig['data-lang']}
      crossorigin={comment.giscusConfig['crossorigin']}
      async
    ></script>
  </div>
)}

<script>
  function updateGiscusTheme() {
    const iframe = document.querySelector('iframe.giscus-frame') as HTMLIFrameElement
    if (iframe) {
      const isDark = document.documentElement.getAttribute('data-theme') === 'dark'
      const theme = isDark ? 'catppuccin_frappe' : 'catppuccin_latte'
      
      iframe.contentWindow?.postMessage(
        { giscus: { setConfig: { theme } } },
        'https://giscus.app'
      )
    }
  }

  function observeThemeChanges() {
    // Create a MutationObserver to watch for theme changes
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'attributes' && 
            (mutation.attributeName === 'data-theme' || mutation.attributeName === 'class')) {
          updateGiscusTheme()
        }
      })
    })

    // Start observing the document element for attribute changes
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['data-theme', 'class']
    })

    return observer
  }

  // Initialize on page load
  document.addEventListener('astro:page-load', () => {
    // Wait for Giscus to load
    setTimeout(updateGiscusTheme, 1000)
    
    // Start observing theme changes
    observeThemeChanges()
  })

  // Also handle page swaps
  document.addEventListener('astro:after-swap', () => {
    setTimeout(() => {
      updateGiscusTheme()
      observeThemeChanges()
    }, 1000)
  })
</script>
